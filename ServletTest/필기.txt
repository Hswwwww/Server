 webapp > 브라우저에게 자원을 줄 최상위 폴더
 
 
 웹사이트 구축
 - Client + Server
 
 서버측 + 웹 기술
 - Servlet
 - JSP
 - Spring
 
 ------------------
 데이터베이스 연동
 - JDBC
 - MYBatis
 - Spring JDBC
 - JPA
 
 웹 페이지
 1. 정적 페이지 > 요청때마다 소스가 변함없는 페이지 > html,js,css
 2. 동적 페이지 > 요청때마다 소스가 변화있는 페이지 > 
 
 
 
 url을 다른사람에게 보냈을때 같은 페이지가 뜨면 정적 
 다르고, 각자의 정보에 맞게(본인 이메일창) 뜨면 동적
 
 Servlet, 서블릿
 - 웹서버에서 자바를 사용한 프로그램을 동작시키는 기술
 - 프로그램의 역할 > 웹 페이지 생성
 - 웹서버측에서 동적으로 웹 페이지를 생산하는 기술
 
 Servlet Class
 - 바리스타(알바생)
 - 클라이언트 요청에 따라 동적으로 웹 페이지를 생산하는 클래스
 
 
 Servlet/JSP Container <== Servlet/JSP Engine
 - 서버측에서 Servelt/JSP를 실행할 수 있도록 해주는 환경
 - Servelt/JSP와 관련된 객체 생성, 실행, 소멸 등... 전반적인 관리
 - 대표 컨테이너 > 톰캣(Tomcat)
 
 
 Servlet Class 작성 규칙 > 알바
 
 1. 서블릿 클래스 선언 > 순수 자바(x), 서블릿 API 사용(o) 
 	a. javax.servlet.Servlet 인터페이스를 구현한다. > 복잡하고 고비용 > 많은 개발자들이 싫어함..처음부터 끝까지 다 건드려야 함 > 그래서 사용하는게 b
 	b. javax.servlet.http.HttpServlet 클래스를 상속받는다. > 단순함. 저비용
 	-- 서블릿 API 상속받은 자바파일을 사용. 
 	
 	
 
 2. doGet/doPost 메소드 선언
 	- 둘 중 하나 선언 or 둘 다 선언
 	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드 > "주문"
 	- 커피 만드는 메소드 > HTML 페이지를 만드는 메소드
 	- 메소드 작성 규칙
 		a. 매개 변수 작성
 			1. java.servlet.http.HTTPServeltRequest
 			2. java.servlet.http.HTTPServeltResponse
 		b. 예외 미루기
 		 	1. java.io.IOEvception > 외부로의 입출력이 일어나기 때문에 기본으로 등록
 		 	2. java.servlet.ServletException 
 	
 	
 3. 동적 HTML 페이지 작성
 	- doGet/doPost 내부에서 HTML 문서를 작성하기 위한 자바 코드를 작성한다. (개발자) > 미리 계획을 작성한다.
 	- HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
 	- PrinterWriter 객체 == 페이지를 제작하는 도구
 	- printXXX("페이지 태그 or 내용"); > 동적으로 페이지 제작
 	- 페이지 완성 > 브라우저에게 반환
 
 	
 4. 서블릿 호출
 
 - 순수 자바는 웹 기술이 아니다. > 웹에서는 자바 프로그램을 호출할 수 없다.
 - 톰캣이 그 요청을 받아서 대신 자바 프로그램을 호출한다. (Servlet Container)
 - 자바 프로그램을 호출하기 위한 가상 주소를 생성
 - webapp > WEB-INF > web.xml(톰캣 환경 설정 파일)
 
 
 
 - JavaResources > src/main/java > "com.test.servlet" > "Ex01.java" (서블릿 클래스가 되어야할 클래스> 
 
 
 
 
 프로젝트 > 오른쪽 > JAVAEE tools > Generate Deployment Description stub
 
 
 서블릿 > 자바를 이용해 동적페이지를 만드는.. 
 

 
 
 
 정적 > 웹서버
 브라우저 : 링크 클릭 > 톰캣 : 해당 요청페에지의 확장자 확인 > 서버요청이 필요한지 안필요한지 구분 > 정적페이지를 브라우저에게 전달
 정적페이지는 서버가 하는 일이 없다. 클라이언트에게 돌려주기만 함. (캔커피 주세요)

 동적 > 웹서버 > 프로그램처리할 수 있는 서버(웹 응용프로그램 서버 WAS)에게 위임 > 처리 > 그 결과를 웹서버에게 돌려줌 > 브라우저
 브라우저: 페이지 달라고 요청 > 톰캣이 서버가 필요한 동적페이지라는 것을 판단 > 동적페이지의 프로세스에 따라서 페이지를 만드는 작업 수행 
 (바리스타가 커피 만드는 과정) > 완성된 결과물을 톰캣이 클라이언트에게 돌려줌
 
 
 톰캣 : 웹서버 + WAS 역할 둘다 다함.
 
 회사에서 보통 톰캣의 WAS + 외부 웹서버 으로 운영 
 
 
 
 데이터 주고 받기
 - 폼(<form>) 전송 > 서버(수신)
 
 - Ex03_Send.java
 - Ex03_Receive.java
 
 
 
 
 
Servlet == JSP
- JSP는 서블릿이다.
- Servlet > 자바 기반 > 클라이언트(문자열 취급) <자바는 html먼지 모른다.>
- JSP > HTML 기반 + 자바 코드 > 개발자에 의해 만들어진 기술 

1. Servlet
2. JSP
3. Servlet + JSP

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 